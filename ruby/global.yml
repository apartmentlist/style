require:
  - rubocop-rspec
  - rubocop-rails

# Run `rubocop --show-cops` for descriptions of each check.
# Defaults at https://github.com/bbatsov/rubocop/blob/master/config/default.yml

AllCops:
  # Add Ruby files that are otherwise missed, since Rubocop only looks for *.rb
  Include:
    - '**/*.rb'
    - 'config.ru'
    - '**/Gemfile'
    - '**/Rakefile'
  Exclude:
    - 'bin/rspec' # auto-generated
    - 'bin/spring' # auto-generated
    - 'bin/setup' # auto-generated
    - 'bin/update' # auto-generated
    - 'config/initializers/devise.rb' # auto-generated
    - 'db/migrate/**' # Lots of style checks don't make sense here
    - 'db/schema.rb' # Autogenerated, should not be checked for style
    - 'db/structure.sql' # Autogenerated, should not be checked for style
    - 'vendor/**/*' # Ignore dependencies from other gems

  # Default formatter will be used if no `-f/--format` option is given.
  DefaultFormatter: progress

  # Cop names are displayed in offense messages by default. Change behavior
  # by overriding DisplayCopNames, or by giving the `--no-display-cop-names`
  # option.
  DisplayCopNames: true

  # Style guide URLs are not displayed in offense messages by default. Change
  # behavior by overriding `DisplayStyleGuide`, or by giving the
  # `-S/--display-style-guide` option.
  DisplayStyleGuide: false

  # When specifying style guide URLs, any paths and/or fragments will be
  # evaluated relative to the base URL.
  StyleGuideBaseURL: https://rubystyle.guide

  # Extra details are not displayed in offense messages by default. Change
  # behavior by overriding ExtraDetails, or by giving the
  # `-E/--extra-details` option.
  ExtraDetails: false

  # Additional cops that do not reference a style guide rule may be enabled by
  # default. Change behavior by overriding `StyleGuideCopsOnly`, or by giving
  # the `--only-guide-cops` option.
  StyleGuideCopsOnly: false

  # All cops except the ones configured `Enabled: false` in this file are enabled by default.
  # Change this behavior by overriding either `DisabledByDefault` or `EnabledByDefault`.
  # When `DisabledByDefault` is `true`, all cops in the default configuration
  # are disabled, and only cops in user configuration are enabled. This makes
  # cops opt-in instead of opt-out. Note that when `DisabledByDefault` is `true`,
  # cops in user configuration will be enabled even if they don't set the
  # Enabled parameter.
  # When `EnabledByDefault` is `true`, all cops, even those configured `Enabled: false`
  # in this file are enabled by default. Cops can still be disabled in user configuration.
  # Note that it is invalid to set both EnabledByDefault and DisabledByDefault
  # to true in the same configuration.
  EnabledByDefault: false
  DisabledByDefault: false

  # New cops introduced between major versions are set to a special pending status
  # and are not enabled by default with warning message.
  # Change this behavior by overriding either `NewCops: enable` or `NewCops: disable`.
  # When `NewCops` is `enable`, pending cops are enabled in bulk. Can be overridden by
  # the `--enable-pending-cops` command-line option.
  # When `NewCops` is `disable`, pending cops are disabled in bulk. Can be overridden by
  # the `--disable-pending-cops` command-line option.
  NewCops: enable

  # Enables the result cache if `true`. Can be overridden by the `--cache` command
  # line option.
  UseCache: true

  # Threshold for how many files can be stored in the result cache before some
  # of the files are automatically removed.
  MaxFilesInCache: 20000

  # The cache will be stored in "rubocop_cache" under this directory. If
  # CacheRootDirectory is ~ (nil), which it is by default, the root will be
  # taken from the environment variable `$XDG_CACHE_HOME` if it is set, or if
  # `$XDG_CACHE_HOME` is not set, it will be `$HOME/.cache/`.
  # The CacheRootDirectory can be overwritten by passing the `--cache-root` command
  # line option or by setting `$RUBOCOP_CACHE_ROOT` environment variable.
  CacheRootDirectory: ~

  # It is possible for a malicious user to know the location of RuboCop's cache
  # directory by looking at CacheRootDirectory, and create a symlink in its
  # place that could cause RuboCop to overwrite unintended files, or read
  # malicious input. If you are certain that your cache location is secure from
  # this kind of attack, and wish to use a symlinked cache location, set this
  # value to "true".
  AllowSymlinksInCacheRootDirectory: false

  # What MRI version of the Ruby interpreter is the inspected code intended to
  # run on? (If there is more than one, set this to the lowest version.)
  # If a value is specified for TargetRubyVersion then it is used. Acceptable
  # values are specificed as a float (i.e. 2.5); the teeny version of Ruby
  # should not be included. If the project specifies a Ruby version in the
  # .ruby-version file, Gemfile or gems.rb file, RuboCop will try to determine
  # the desired version of Ruby by inspecting the .ruby-version file first,
  # followed by the Gemfile.lock or gems.locked file. (Although the Ruby version
  # is specified in the Gemfile or gems.rb file, RuboCop reads the final value
  # from the lock file.) If the Ruby version is still unresolved, RuboCop will
  # use the oldest officially supported Ruby version (currently Ruby 2.4).
  TargetRubyVersion: 2.6.6


#######################
######## STYLE ########
#######################

# Don't require documentation for classes with obvious uses
Style/Documentation:
  Exclude: ["spec/", "test/", "app/controllers", "app/models"]

# This cop thinks that
#
#     return unless something
#     work
#
# is better than
#
#     if something
#       work
#     end
#
# This isn't necessarily true, so let's disable the cop
Style/GuardClause:
  Enabled: false

# Don't require underscores in long numbers, eg. 123_456_789.
# We often have IDs, not "numbers".
Style/NumericLiterals:
  Enabled: false

# Don't require using `some_number.zero?` instead of `some_number == 0` or vice versa
Style/NumericPredicate:
  Enabled: false


#######################
######## LAYOUT #######
#######################

# Used to be 80, new consensus is 120 as of 2020.
# The standard-issue AList laptop can fit:
# Using VSCode, one 214-char editor or two 102-char editors
# Using RubyMine, one 238-char editor or two 114-char editors
Layout/LineLength:
  Max: 120


#######################
####### METRICS #######
#######################

##
# Metrics rules are mostly measures of complexity that are meant to be a pointer to when something *might* be
# wrong. We don't want to break the build on a guess, so most of these are either disabled or set to levels
# so high that we're *sure* there's something wrong.
##

# ABC complexity measure; see https://en.wikipedia.org/wiki/ABC_Software_Metric
Metrics/AbcSize:
  Enabled: false

# RSpec's DSL leads to long blocks, and that's ok
Metrics/BlockLength:
  Max: 50
  IgnoredMethods: ['context', 'describe', 'shared_examples']

# Prevent classes from being too long
Metrics/ClassLength:
  Enabled: false

# Check that there aren't too many different if-paths through a method
Metrics/CyclomaticComplexity:
  Enabled: false

# Complain if a single method is longer than X lines
Metrics/MethodLength:
  Max: 50
  CountAsOne: ['array', 'hash', 'heredoc']

# Check that no module is too long
Metrics/ModuleLength:
  Enabled: false

# Complain if this measurement of complexity is too high in a single method
Metrics/PerceivedComplexity:
  Enabled: false


#######################
######## RAILS ########
#######################

# This rule has auto-correct enabled and declares itself as safe but isn't actually (running it on API breaks tests)
Rails/Delegate:
  Enabled: false


#######################
######## RSPEC ########
#######################

# This bans describing tests using strings, preventing us from testing things other than classes
RSpec/DescribeClass:
  Enabled: false

# This is basically a Metrics rule
RSpec/ExampleLength:
  Enabled: false

# Allow more than one expectation in a single example
RSpec/MultipleExpectations:
  Enabled: false

# Allow as many let declarations as are needed
RSpec/MultipleMemoizedHelpers:
  Enabled: false

# Don't require that `subject` be renamed before use
RSpec/NamedSubject:
  Enabled: false

# We like big tests and we cannot lie
RSpec/NestedGroups:
  Enabled: false

# This rule has auto-correct enabled and declares itself as safe but isn't actually (running it on API breaks tests)
RSpec/ScatteredLet:
  Enabled: false
